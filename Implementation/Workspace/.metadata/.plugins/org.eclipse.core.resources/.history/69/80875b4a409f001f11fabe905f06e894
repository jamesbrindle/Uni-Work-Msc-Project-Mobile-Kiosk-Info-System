package sik.server;

import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;

import javax.swing.JTextArea;

import sik.admin.Store;
import sik.admin.Records;
import sik.common.RMIClient;
import sik.common.RMIServer;

public class RMIServerImpl extends UnicastRemoteObject implements RMIServer {

	private static final long serialVersionUID = 1L;

	private ArrayList<RMIClient> clientArrayList;

	private Store store;
	private Records record;
	private ServerOptions serverOptions;
	protected JTextArea logs;


	public RMIServerImpl(JTextArea logs) throws RemoteException {
		this.logs = logs;
		clientArrayList = new ArrayList<RMIClient>();
		serverOptions = new ServerOptions();

		store = new Store();
		store = store.fileIn(serverOptions.getStoreFileName());

		record = new Records();
	}

	public void startRMIServer() {
		if (System.getSecurityManager() == null) {
			System.setSecurityManager(new RMISecurityManager());
		}

		String name = serverOptions.getRMIAddress();

		try {
			Naming.rebind(name, this);
			dispatchMessage("RMI Server Successfully Bound");
		} catch (Exception e) {
			System.err.println("RMIServer exception: " + 
					e.getMessage());
			e.printStackTrace();
			dispatchMessage("Error Binding RMI Server");
		}
	}

	public void dispatchMessage(String theMessage) {
		logs.append(theMessage+"\n");
	}

	public void connect(RMIClient theClient) throws RemoteException {
		clientArrayList.add(theClient);	
		dispatchMessage("RMI Client Connected: " + theClient.toString());
	}

	public void validateUser(RMIClient theClient, String studentID, String pinNo)
	throws RemoteException {

		if(store.getRecordFromStudentID(studentID).gettPinNo().equalsIgnoreCase(pinNo)) {

			this.record = store.getRecordFromStudentID(studentID);
			theClient.dispatchRecord(record.recordToArrayList());
			dispatchMessage("User successfully Validated \n" +
					"Sending Records ArrayList to client");
			System.out.println(record.getPostCode());
		}

		else {	
			dispatchMessage("Error Validating Client :" + theClient);
		}
	}
}