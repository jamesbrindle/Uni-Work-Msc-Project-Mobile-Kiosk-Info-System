package sik.admin;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

public class Store implements Serializable {

    private static final long serialVersionUID = 1L;
    public ArrayList<StudentRecords> recordArrayList;
    private int currentRecordIndex;
	
    /**
     * Constructs the store, creates an array list for account records to be stored
     */
    public Store() {
        recordArrayList = new ArrayList<StudentRecords>();
	
    }
    
    public StudentRecords getRecordFromStudentID(String studentID) {
    	int recordPointer = -1;
    	
    	for(int i = 0; i<recordArrayList.size(); i++)
    	{
    		if(recordArrayList.get(i).getStudentID().equalsIgnoreCase(studentID)) {
    			recordPointer = i;
    		}
    	}
    	return recordArrayList.get(recordPointer);
    }
	
    /**
     * Add an account to the array list
     * @param record The account to add
     */
    public void addRecord(StudentRecords record) {
        recordArrayList.add(record);
    }
	
    /**
     * removes an account from the array list
     * @param record The account to be removed
     */
    public void removeRecord(StudentRecords record) {
        recordArrayList.remove(record);
    }
	
    /**
     * Returns the account corresponding the the currentAccountIndex
     * which are navigated through by the firstAccountPointer, lastAccountPointer,
     * previousAccountPointer and nextAccountPointer methods
     * @return returns the current record
     */
    public StudentRecords currentRecord() {
        if (recordArrayList.size() == 0) {
            return null;
        } else {
            return recordArrayList.get(currentRecordIndex);
        }
    }
	
    /**
     * points to first account which is that of the first object in the array
     */
    public void firstRecordPointer() {
        currentRecordIndex = 0;
    }
	
    /**
     * points to the last account which is that of the size of the array -1
     */
    public void lastRecordPointer() {
        currentRecordIndex = recordArrayList.size() - 1;
    }
	
    /**
     * Points to the next account pointer, which increments the currentAccountIndex
     */
    public void nextRecordPointer() {
        if (currentRecordIndex < recordArrayList.size() - 1) {
            currentRecordIndex++;
        }
    }
	
    /**
     * Points to the previous account record, which decrements the currentAccountIndex
     */
    public void previousRecordPointer() {
        if (currentRecordIndex > 0) {
            currentRecordIndex--;
        }
    }
	
    /**
     * Checks if the current pointer is set at the last record
     * @return boolean true if is pointed at last record, false otherwise
     */
    public boolean isLast() {
        if (currentRecordIndex == recordArrayList.size() - 1) {
            return true;
        } else {
            return false;
        }
    }
	
    /**
     * Checks if the current pointer is set at the first record
     * @return boolean true if is pointed at first record, false otherwise
     */
    public boolean isFirst() {
        if (currentRecordIndex == 0) {
            return true;
        } else {
            return false;
        }
    }
	
    /**
     * Checks if the store is empty
     * @return boolean true if store is empty, false otherwise
     */
    public boolean isEmpty() {
        if (recordArrayList.size() == 0) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Saves the store as an object and saves it within a file
     * @param fileName the file name the file is to be saved as
     * @exception e if an error exists in object streaming and writing the file
     * @exception ioe if an error exists in flushing and closing the object output stream
     */
    public void fileOut(String fileName) {
        ObjectOutputStream oos = null; 

        try {
            oos = new ObjectOutputStream(new FileOutputStream(fileName));
            oos.writeObject(Store.this); 
        } catch (Exception e) {
            String errMessage = e.getMessage();

            System.out.println("Error: " + errMessage); 
        } finally {
            if (oos != null) {
                try {
                    oos.flush(); 
                } catch (IOException ioe) {}

                try {
                    oos.close(); 
                } catch (IOException ioe) {}
            }
        }	    
    }    
	
    /**
     * Opens a file and casts the object found within that file as a store
     * @param fileName the file name the file is to be opened
     * @return returns the store found within the file
     * @exception e if any errors exists in reading and casting the object
     * @exception ioe if an errors exists in closing the object input stream
     */
    public Store fileIn(String fileName) {
        ObjectInputStream oi = null; 
        Store temp = null; 

        try {
            FileInputStream fi = new FileInputStream(fileName);

            oi = new ObjectInputStream(fi);		
            temp = (Store) oi.readObject(); 
        } catch (Exception e) { 
            String error = e.getMessage();

            System.out.println("Error: " + error); 
        } finally {
            if (oi != null) {
                try {
                    oi.close(); 
                } catch (IOException ioe) {}
            }
        }
        return temp;   
    }        
  }
