package sik.client.user.panes;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import sik.client.user.FontStyles;
import sik.client.user.panels.HomePanel;

/**
 * Panel which is displayed as a content inside the home panel. As the home
 * panel displays a number of different complex panels corresponding to the
 * selected category this has been given the name 'pane' rather than 'panel'.
 * 
 * This particular pane is is displayed when the 'Timetable' button is pressed
 * on the home panel
 * 
 * @author Jamie Brindle (06352322) - Manchester Metropolitan University
 */
public class TimetablePane extends JPanel {

	/**
	 * Default universal serializable class ID
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Parent class which created an instance of this class. Set as global in
	 * order to quickly access its methods and send back information
	 */
	protected HomePanel homePanel;

	// internal panels
	private JPanel timetableNameArea, timestableArea;

	// layouts
	private GridBagConstraints timestableNameAreaLayout, timestableAreaLayout;

	// timetable elements
	private JLabel timestableNameLabel;
	private JTextField timestableNameTextField;

	private JLabel /* times */t0, t9, t10, t11, t12, t13, t14, t15, t16, t17;
	private JLabel /* days */mon, tue, wed, thu, fri;

	private ArrayList<JTextArea> timestableArrayList;
	private ArrayList<JScrollPane> timestableArrayListScrollPane;
	private ArrayList<JLabel> timestableTimesArrayList;
	private ArrayList<JLabel> timestableDaysArrayList;

	private boolean isTimestableNull = true;

	/**
	 * Class constructor
	 * 
	 * @param homePanel
	 *            The parent class which called this class
	 */
	public TimetablePane(HomePanel homePanel) {
		this.homePanel = homePanel;

		setPreferredSize(new Dimension(650, 400));
		setMaximumSize(new Dimension(650, 400));
		setMinimumSize(new Dimension(650, 400));

		setOpaque(false);

		timestableTimesArrayList = new ArrayList<JLabel>();
		timestableDaysArrayList = new ArrayList<JLabel>();
		timestableArrayList = new ArrayList<JTextArea>();
		timestableArrayListScrollPane = new ArrayList<JScrollPane>();

		if (homePanel.mainGUI.rmiClient.studentRecord.getTimetable() == null) {
			isTimestableNull = true;
		} else {
			isTimestableNull = false;
		}

		timetableNameArea = new JPanel(new GridBagLayout());
		timestableNameAreaLayout = new GridBagConstraints();
		timetableNameArea.setOpaque(false);

		timestableArea = new JPanel(new GridBagLayout());
		timestableAreaLayout = new GridBagConstraints();
		timestableArea.setOpaque(false);

		loadTimestableNameArea();
		loadTimestableArea();

		add(timetableNameArea, BorderLayout.NORTH);
		add(timestableArea, BorderLayout.SOUTH);
	}

	/**
	 * Prepares timetable name area panel elements
	 */
	private void loadTimestableNameArea() {

		timestableNameAreaLayout.insets = new Insets(0, 5, 10, 5);

		timestableNameAreaLayout.gridx = 0;

		timestableNameLabel = new JLabel("Timestable               ");
		timestableNameLabel.setFont(FontStyles.extraLargeFont);
		timestableNameLabel.setForeground(new Color(255, 255, 255));
		timetableNameArea.add(timestableNameLabel, timestableNameAreaLayout);

		timestableNameAreaLayout.gridx = 1;

		timestableNameTextField = new JTextField(23);
		timestableNameTextField.setFont(FontStyles.smallFont);
		timestableNameTextField.setEditable(false);
		timestableNameTextField.setOpaque(false);
		timestableNameTextField.setForeground(new Color(255, 255, 255));
		timestableNameTextField.setBorder(javax.swing.BorderFactory
				.createEmptyBorder());

		timetableNameArea.add(timestableNameTextField,
				timestableNameAreaLayout);
	}

	/**
	 * Prepares timetable area panel elements of this GUI
	 */
	private void loadTimestableArea() {
		timestableAreaLayout.anchor = GridBagConstraints.CENTER;
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);

		initialiseTimes();
		addTimesToTimesArrayList();
		setTimeLabelsStyle();
		initialiseDays();
		addDayLabelsToArrayList();
		setDayLabelsStyle();
		addTimetableFields();
	}

	/**
	 * Prepares the time period header title labels
	 */
	private void initialiseTimes() {
		t0 = new JLabel(" ");
		t9 = new JLabel("9-10");
		t10 = new JLabel("10-11");
		t11 = new JLabel("11-12");
		t12 = new JLabel("12-13");
		t13 = new JLabel("13-14");
		t14 = new JLabel("14-15");
		t15 = new JLabel("15-16");
		t16 = new JLabel("16-17");
		t17 = new JLabel("17-18");
	}

	/**
	 * Adds the labels to an array to be able to quickly add label properties in
	 * the form of a for loop
	 */
	public void addTimesToTimesArrayList() {
		timestableTimesArrayList.add(t0);
		timestableTimesArrayList.add(t9);
		timestableTimesArrayList.add(t10);
		timestableTimesArrayList.add(t11);
		timestableTimesArrayList.add(t12);
		timestableTimesArrayList.add(t13);
		timestableTimesArrayList.add(t14);
		timestableTimesArrayList.add(t15);
		timestableTimesArrayList.add(t16);
		timestableTimesArrayList.add(t17);
	}

	/**
	 * Adds time period label properties to the labels
	 */
	public void setTimeLabelsStyle() {
		for (JLabel label : timestableTimesArrayList) {
			label.setFont(FontStyles.smallFont);
			label.setForeground(new Color(255, 255, 255));
			timestableArea.add(label, timestableAreaLayout);
		}
	}

	/**
	 * Prepares the day header labels
	 */
	private void initialiseDays() {
		mon = new JLabel("Mon       ");
		tue = new JLabel("Tue       ");
		wed = new JLabel("Wed       ");
		thu = new JLabel("Thu       ");
		fri = new JLabel("Fri       ");
	}

	/**
	 * Adds the day header labels to an array list to be able to quickly add
	 * label properties in the form of a for loop
	 */
	public void addDayLabelsToArrayList() {
		timestableDaysArrayList.add(mon);
		timestableDaysArrayList.add(tue);
		timestableDaysArrayList.add(wed);
		timestableDaysArrayList.add(thu);
		timestableDaysArrayList.add(fri);
	}

	/**
	 * Adds day label properties to the day header labels
	 */
	public void setDayLabelsStyle() {
		for (JLabel label : timestableDaysArrayList) {
			label.setFont(FontStyles.mediumFont);
			label.setForeground(new Color(255, 255, 255));
		}
	}

	/**
	 * Adds the time period to the panel and set the contents of that period to
	 * that of the time in the student records object
	 */
	public void addTimetableFields() {
		for (int i = 0; i < 45; i++) {

			timestableArrayList.add(new JTextArea(3, 5));

			if (!(isTimestableNull)) {
				timestableArrayList.get(i).setText(
						homePanel.mainGUI.rmiClient.studentRecord
								.getTimetable().get(i));
			}

			timestableArrayList.get(i).setEditable(false);
			timestableArrayListScrollPane.add(new JScrollPane(
					timestableArrayList.get(i)));
		}
		if (!(isTimestableNull)) {
			timestableNameTextField
					.setText(homePanel.mainGUI.rmiClient.studentRecord
							.getTimestableName());
		}

		timestableAreaLayout.anchor = GridBagConstraints.WEST;

		// adds the times corresponding the particular day
		// done in different methods to keep this method a lot smaller
		addMondayField();
		addTuesdayField();
		addWednesdayField();
		addThursdayField();
		addFridayField();
	}

	/**
	 * Adds the times corresponding the particular day to the panel. In this
	 * case the 'Monday Field'
	 * 
	 * @see #addTimetableFields()
	 */
	public void addMondayField() {
		timestableAreaLayout.gridy = 1;
		timestableArea
				.add(timestableDaysArrayList.get(0), timestableAreaLayout);

		timestableAreaLayout.insets = new Insets(5, 2, 5, 1);
		for (int i = 0; i < 9; i++) {
			timestableArea.add(timestableArrayListScrollPane.get(i),
					timestableAreaLayout);
		}
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);
	}

	/**
	 * Adds the times corresponding the particular day to the panel. In this
	 * case the 'Tuesday Field'
	 * 
	 * @see #addTimetableFields()
	 */
	public void addTuesdayField() {
		timestableAreaLayout.gridy = 2;
		timestableArea
				.add(timestableDaysArrayList.get(1), timestableAreaLayout);

		timestableAreaLayout.insets = new Insets(5, 2, 5, 1);
		for (int i = 9; i < 18; i++) {
			timestableArea.add(timestableArrayListScrollPane.get(i),
					timestableAreaLayout);
		}
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);
	}

	/**
	 * Adds the times corresponding the particular day to the panel. In this
	 * case the 'Wednesday Field'
	 * 
	 * @see #addTimetableFields()
	 */
	public void addWednesdayField() {
		timestableAreaLayout.gridy = 3;
		timestableArea
				.add(timestableDaysArrayList.get(2), timestableAreaLayout);

		timestableAreaLayout.insets = new Insets(5, 2, 5, 1);
		for (int i = 18; i < 27; i++) {
			timestableArea.add(timestableArrayListScrollPane.get(i),
					timestableAreaLayout);
		}
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);
	}

	/**
	 * Adds the times corresponding the particular day to the panel. In this
	 * case the 'Thursday Field'
	 * 
	 * @see #addTimetableFields()
	 */
	public void addThursdayField() {
		timestableAreaLayout.gridy = 4;
		timestableArea
				.add(timestableDaysArrayList.get(3), timestableAreaLayout);

		timestableAreaLayout.insets = new Insets(5, 2, 5, 1);
		for (int i = 27; i < 36; i++) {
			timestableArea.add(timestableArrayListScrollPane.get(i),
					timestableAreaLayout);
		}
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);
	}

	/**
	 * Adds the times corresponding the particular day to the panel. In this
	 * case the 'Friday Field'
	 * 
	 * @see #addTimetableFields()
	 */
	public void addFridayField() {
		timestableAreaLayout.gridy = 5;
		timestableArea
				.add(timestableDaysArrayList.get(4), timestableAreaLayout);

		timestableAreaLayout.insets = new Insets(5, 2, 5, 1);
		for (int i = 36; i < 45; i++) {
			timestableArea.add(timestableArrayListScrollPane.get(i),
					timestableAreaLayout);
		}
		timestableAreaLayout.insets = new Insets(5, 5, 5, 5);
	}
}
