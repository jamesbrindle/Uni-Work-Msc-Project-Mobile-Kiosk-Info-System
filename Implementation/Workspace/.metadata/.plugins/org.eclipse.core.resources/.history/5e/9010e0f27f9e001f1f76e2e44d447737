package sik.server;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


public class ServerLogger implements ActionListener{
	
	private Container container;
	private JFrame frame;
	protected JTextArea logsTextArea;
	private JScrollPane logsScrollPane;
	private JButton closeButton, exportLogButton;
	private JPanel buttonPanel;
		
	public ServerLogger() {
		frame = new JFrame("RMI Server");
		frame.setResizable(false);
		
		 frame.addWindowListener(new WindowAdapter() {

	            public void windowClosing(WindowEvent e) {

	                frame.dispose();
	                System.exit(0);
					
	            }
	        });		
		
		container = new Container();
		container = frame.getContentPane();
		container.setLayout(new BorderLayout());
		
		logsTextArea = new JTextArea(20,40);
		logsScrollPane = new JScrollPane(logsTextArea);
		
		closeButton = new JButton("Stop and Close Server");
		closeButton.addActionListener(this);
		
		exportLogButton = new JButton("Export Log");
		exportLogButton.addActionListener(this);
		
		container.add(logsScrollPane, BorderLayout.NORTH);
		
		buttonPanel = new JPanel();
		buttonPanel.setLayout(new FlowLayout());
		
		buttonPanel.add(closeButton);
		buttonPanel.add(exportLogButton);
	
		container.add(buttonPanel, BorderLayout.SOUTH);
		
	    // centre frame on screen
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
         
        frame.setLocation(screenWidth / 4, screenHeight / 4);
        frame.pack();
        frame.setVisible(true);			
	}

	public void exportFile() {
		Calendar cal = Calendar.getInstance();
	    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");	   

		BufferedWriter f;
		try {
			f = new BufferedWriter(new FileWriter("serverLog.txt"));
			f.write(logsTextArea.getText());
			f.newLine();
			f.flush();
			f.close();
			
			logsTextArea.append("\n---Daet: "+ sdf.format(cal.getTime())+"---\n\nLog stored as serverLog.txt in current working directory\n");
		} catch (IOException e) {
			logsTextArea.append("\nLog save unsuccessful\n");
			e.printStackTrace();
		}
		
	}
	
	public void actionPerformed(ActionEvent e) {
		if(e.getSource()==closeButton) {
			frame.dispose();
			System.exit(0);
		}
		if(e.getSource()==exportLogButton) {
			exportFile();
		}
	}
	

}
