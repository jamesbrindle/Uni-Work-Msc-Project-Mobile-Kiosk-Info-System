import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class InOutEmails {

	private ArrayList<String> emailList;

	public InOutEmails() {

		emailList = new ArrayList<String>();
	}

	public ArrayList<String> getEmailsArrayList() {

		return emailList;
	}
	
	 public boolean isValidSyntax(String s)
	   {
	      Pattern p = Pattern.compile(".+@.+\\.[a-z]+");
	      Matcher m = p.matcher(s);
	      boolean matchFound = m.matches();
	      
	      return matchFound;
	   }

	
	public void getEmails() {

		File file = new File("scan.txt");
		FileInputStream fis = null;
		InputStreamReader in = null;
		BufferedReader br = null;

		String email = "";

		try {
			fis = new FileInputStream(file);
			in = new InputStreamReader(fis, "UTF-16");
			br = new BufferedReader(in);

			while ((email = br.readLine()) != null) {

				if (!(email.equalsIgnoreCase("")) && email.contains("@")
						&& !(email.contains("switchingon"))
						&& !(email.contains("unicom"))
						&& !(email.contains(" "))
						&& !(email.contains("titan"))
						&& isValidSyntax(email)) {
					emailList.add(email);
				}
			}

			ArrayList<String> tempArray = new ArrayList<String>();

			int onePercent = emailList.size() / 100;
			int counter = 0;
			
			for (int i = 0; i < emailList.size(); i++) {
				
				
				if(i % onePercent == 0) {
					counter++;					
					System.out.println(counter + "% Complete");
				}					

				if (!(tempArray.contains(emailList.get(i)))) {
					tempArray.add(emailList.get(i));
				}
			}
			
			Collections.shuffle(tempArray);
			emailList = tempArray;

		} catch (FileNotFoundException e) {
			System.out.println("Problem loading file - File missing");

		} catch (IOException e) {
			System.out.println("Problem loading file - Possibly corrupt");
		} finally {
			try {

				fis.close();
				br.close();
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public void exportEmailsToTextFile() {

		File file = new File("output1.txt");
		FileWriter fw = null;
		BufferedWriter bw = null;
		try {

			fw = new FileWriter(file);
			bw = new BufferedWriter(fw);
			System.out.println(emailList.size());

			for (int i = 0; i < emailList.size(); i++) {

				if (emailList.get(i) != null) {
					bw.write(emailList.get(i));
					bw.newLine();
				}
			}

		} catch (IOException e) {
			System.out.println("ProblemWriting File");
			System.err.println(e.getMessage());

		} finally {
			try {
				bw.close();
				fw.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
