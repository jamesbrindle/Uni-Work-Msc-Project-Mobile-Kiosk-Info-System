package sik.client;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;

public class ExitDialog extends JDialog
implements ActionListener, Serializable {

	private static final long serialVersionUID = 1L;
	
	private ClientOptions clientOptions;
	
	private JButton OKButton, cancelButton;
	private JPasswordField passwordTextField;
	private JLabel messageLabel;
	private String password;
	private JPanel messagePane, passwordPane, buttonPane;	
	public int choice;

	public ExitDialog(JFrame parent, String title) {

        super(parent, title, true);
        
        clientOptions = new ClientOptions();
        password = clientOptions.getAdminPassword();
        
		//message pane		
        
		messagePane = new JPanel();
		
		messageLabel = new JLabel("Please enter admin password to close program");
		messageLabel.setForeground(new Color(0,0,0));
		
		messagePane.add(messageLabel);
		
		//password pane
		
		passwordPane = new JPanel();
		
		passwordTextField = new JPasswordField(20);		
		
		passwordPane.add(new JLabel("Password:"));
		passwordPane.add(passwordTextField);		
					
		//button pane
		
		buttonPane = new JPanel();
		
		OKButton = new JButton("OK");
		OKButton.addActionListener(this);
		
		cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(this);
		
		buttonPane.add(OKButton);
		buttonPane.add(cancelButton);	
		
		// add panes
		
		getContentPane().add(messagePane, BorderLayout.NORTH);
		getContentPane().add(passwordPane, BorderLayout.CENTER);
		getContentPane().add(buttonPane, BorderLayout.SOUTH); 
		
		//display attributes
		
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		
		setResizable(false);         
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension screenSize = tk.getScreenSize();
		int screenHeight = screenSize.height;
		int screenWidth = screenSize.width;
		setLocation(screenWidth / 4, screenHeight / 4);
		
		pack();
		setVisible(true);

	}

	public int getChoice() {
		return choice;
	}

	public void setChoice(int c) {
		this.choice = c;
	}

	@SuppressWarnings("deprecation")
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == OKButton) {
			if(passwordTextField.getText().equalsIgnoreCase(password)) {
				this.setChoice(1);
				setVisible(false); 
				dispose();
			}
			else {
				messageLabel.setText("Wrong password. Please try again");
				messageLabel.setForeground(new Color(255,0,0));
			}			
		}

		if (e.getSource() == cancelButton) {
			this.setChoice(0);
			setVisible(false); 
			dispose();
		}
	}
}
